{
 "type": "evaluation_cross_validation_task",
 "estimator": "Pipeline(steps=[('preprocessor',\n                 ColumnTransformer(transformers=[('numerical_transformer',\n                                                  Pipeline(steps=[('imputer',\n                                                                   SimpleImputer()),\n                                                                  ('scaler',\n                                                                   StandardScaler())]),\n                                                  ['Age', 'Fare', 'SibSp',\n                                                   'Parch', 'Age + Fare',\n                                                   'Age + Parch', 'Age + SibSp',\n                                                   'Fare + Parch',\n                                                   'Fare + SibSp',\n                                                   'Parch + SibSp',\n                                                   'Age * Fare', 'Age * Parch',\n                                                   'Age * SibSp',\n                                                   'Fare * Parch',\n                                                   'Fare * SibSp',\n                                                   'Parch * SibSp']),\n                                                 ('categorical_transformer',\n                                                  Pipeline(steps=[('imputer',\n                                                                   SimpleImputer(strategy='most_frequent')),\n                                                                  ('encoder',\n                                                                   OneHotEncoder(handle_unknown='ignore'))]),\n                                                  ['Embarked', 'Sex',\n                                                   'Pclass'])])),\n                ('selector',\n                 ColumnSelector(cols=[3, 6, 10, 11, 13, 15, 19, 20, 21, 23])),\n                ('classifier',\n                 LogisticRegression(random_state=42, solver='liblinear'))])",
 "train_data_set": "     PassengerId  Survived   Age  ...  Fare * Parch  Fare * SibSp  Parch * SibSp\n706          447         1  13.0  ...          19.5         0.000              0\n486          288         0  22.0  ...           0.0         0.000              0\n529          145         0  18.0  ...           0.0         0.000              0\n850          418         1  18.0  ...          26.0         0.000              0\n796          221         1  16.0  ...           0.0         0.000              0\n..           ...       ...   ...  ...           ...           ...            ...\n365          821         1  52.0  ...          93.5        93.500              1\n227          540         1  22.0  ...          99.0         0.000              0\n732          884         0  28.0  ...           0.0         0.000              0\n465           70         0  26.0  ...           0.0        17.325              0\n490          738         1  35.0  ...           0.0         0.000              0\n\n[712 rows x 21 columns]",
 "test_data_set": "     PassengerId  Survived   Age  ...  Fare * Parch  Fare * SibSp  Parch * SibSp\n561          149         0  36.5  ...          52.0          0.00              0\n178          243         0  29.0  ...           0.0          0.00              0\n560          346         1  24.0  ...           0.0          0.00              0\n861           28         0  19.0  ...         526.0        789.00              6\n206           23         1  15.0  ...           0.0          0.00              0\n..           ...       ...   ...  ...           ...           ...            ...\n876          678         1  18.0  ...           0.0          0.00              0\n88           742         0  36.0  ...           0.0         78.85              0\n885          576         0  19.0  ...           0.0          0.00              0\n464          400         1  28.0  ...           0.0          0.00              0\n630          322         0  27.0  ...           0.0          0.00              0\n\n[179 rows x 21 columns]",
 "estimator_params": {
  "preprocessor__numerical_transformer__imputer__strategy": "median",
  "classifier__penalty": "l1",
  "classifier__C": 1.0
 },
 "field_delimiter": ",",
 "feature_columns": "all",
 "id_column": "PassengerId",
 "label_column": "Survived",
 "random_seed": 42,
 "threshold_selection_by": "f1",
 "metric_greater_is_better": true,
 "threshold_tuning_range": [
  0.01,
  1.0,
  0.01
 ],
 "export_classification_reports": true,
 "export_confusion_matrixes": true,
 "export_roc_curves": true,
 "export_pr_curves": true,
 "export_false_positives_reports": true,
 "export_false_negatives_reports": true,
 "export_also_for_train_folds": true,
 "fscore_beta": 1,
 "fold_options": {
  "total_folds": 5,
  "shuffle": true
 },
 "fold_method": "stratified"
}